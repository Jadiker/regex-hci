'''
6/14/2020

Alright, so I've got the Lark Parser working and it works wonderfully (I'm almost wondering if I should use it in the instruction follower, but that's a different matter.)

So the next thing to do is to try to figure out how to convert it into a regex.

It doesn't seem too hard.

character classes can always be done with [].
`StartsWith` just puts it at the start.
`EndsWith` just puts it at the end.
`Contains` is usually just `.*x.*`
`Not` is a negative lookahead.
`Optional` is `?`.
`KleeneStar` is `*`
`Concat` you literally just put them next to each other.
`Or` is `|`.
`And` I don't understand.
`Repeat` is just literally `concat` K times.
`Repeat` at least is `concat` K times followed by `KleeneStar`.
`RepeatRange` is just `or`s of `concat`s from k1 to k2.

I really don't think that this is too bad.
And with the Lark parser, I should be fine.

Now I just need a few examples to test it on.
'''

'''
6/15/2020

Looks like you use two lookaheads for the `And` operator:
    https://stackoverflow.com/questions/3041320/regex-and-operator

Yup, here's confirmation:
    https://stackoverflow.com/questions/469913/regular-expressions-is-there-an-and-operator

Great!
So I think I can do the conversion now!
Let's get the syntax up and running and then we'll work on it!

Here's what's available in the common package of lark:
    https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark

Next I need to learn how to navigate the tree.


The "sep" operator is also in there.
'''

'''
6/19/2020

Okay, so I think `startswith` and `endswith` work differently than I previously thought.

Is `and(startswith(<A>), endswith(<B>))` a valid expression?

Yeah. But I don't think they work too differently.
I think if you just replace it with `.*` I think it will be fine.

I don't have "<sep>" yet, but I don't understand it from the link I was given and I also don't see how it's used in any of the examples in the spreadsheet.

Here's the link I was given:
    https://github.com/utopia-group/regel/blob/a8660915cccfd0356ce07b50afd2aebae211f77e/resnax/src/resnax/synthesizer/SketchProgram.java#L58

I also don't have "not" or "optional" from above, which is what was in the original paper.
The "not" operator is tricky because for character classes you usually do `[^a-zA-Z]` for "not(<let>)" rather than `(?![a-zA-Z])`.
So it will be tricky to make it look natural. It will still work, though.
'''
